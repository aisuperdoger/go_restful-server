// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.0
// source: paddle_ocr.proto

package paddle_ocr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PaddleOcrServiceClient is the client API for PaddleOcrService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaddleOcrServiceClient interface {
	PaddleOcr(ctx context.Context, in *Image, opts ...grpc.CallOption) (*ImageText, error)
}

type paddleOcrServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaddleOcrServiceClient(cc grpc.ClientConnInterface) PaddleOcrServiceClient {
	return &paddleOcrServiceClient{cc}
}

func (c *paddleOcrServiceClient) PaddleOcr(ctx context.Context, in *Image, opts ...grpc.CallOption) (*ImageText, error) {
	out := new(ImageText)
	err := c.cc.Invoke(ctx, "/paddle_ocr.PaddleOcrService/PaddleOcr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaddleOcrServiceServer is the server API for PaddleOcrService service.
// All implementations must embed UnimplementedPaddleOcrServiceServer
// for forward compatibility
type PaddleOcrServiceServer interface {
	PaddleOcr(context.Context, *Image) (*ImageText, error)
	mustEmbedUnimplementedPaddleOcrServiceServer()
}

// UnimplementedPaddleOcrServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPaddleOcrServiceServer struct {
}

func (UnimplementedPaddleOcrServiceServer) PaddleOcr(context.Context, *Image) (*ImageText, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaddleOcr not implemented")
}
func (UnimplementedPaddleOcrServiceServer) mustEmbedUnimplementedPaddleOcrServiceServer() {}

// UnsafePaddleOcrServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaddleOcrServiceServer will
// result in compilation errors.
type UnsafePaddleOcrServiceServer interface {
	mustEmbedUnimplementedPaddleOcrServiceServer()
}

func RegisterPaddleOcrServiceServer(s grpc.ServiceRegistrar, srv PaddleOcrServiceServer) {
	s.RegisterService(&PaddleOcrService_ServiceDesc, srv)
}

func _PaddleOcrService_PaddleOcr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Image)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaddleOcrServiceServer).PaddleOcr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paddle_ocr.PaddleOcrService/PaddleOcr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaddleOcrServiceServer).PaddleOcr(ctx, req.(*Image))
	}
	return interceptor(ctx, in, info, handler)
}

// PaddleOcrService_ServiceDesc is the grpc.ServiceDesc for PaddleOcrService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaddleOcrService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "paddle_ocr.PaddleOcrService",
	HandlerType: (*PaddleOcrServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PaddleOcr",
			Handler:    _PaddleOcrService_PaddleOcr_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "paddle_ocr.proto",
}
