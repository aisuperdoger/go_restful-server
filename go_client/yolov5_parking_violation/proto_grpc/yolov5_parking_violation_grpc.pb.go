// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.0
// source: yolov5_parking_violation.proto

package yolov5_parking_violation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Yolov5ParkingViolationServiceClient is the client API for Yolov5ParkingViolationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Yolov5ParkingViolationServiceClient interface {
	Yolov5ParkingViolation(ctx context.Context, in *VideoPath, opts ...grpc.CallOption) (*VideoPath, error)
}

type yolov5ParkingViolationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewYolov5ParkingViolationServiceClient(cc grpc.ClientConnInterface) Yolov5ParkingViolationServiceClient {
	return &yolov5ParkingViolationServiceClient{cc}
}

func (c *yolov5ParkingViolationServiceClient) Yolov5ParkingViolation(ctx context.Context, in *VideoPath, opts ...grpc.CallOption) (*VideoPath, error) {
	out := new(VideoPath)
	err := c.cc.Invoke(ctx, "/yolov5_parking_violation.Yolov5ParkingViolationService/yolov5ParkingViolation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Yolov5ParkingViolationServiceServer is the server API for Yolov5ParkingViolationService service.
// All implementations must embed UnimplementedYolov5ParkingViolationServiceServer
// for forward compatibility
type Yolov5ParkingViolationServiceServer interface {
	Yolov5ParkingViolation(context.Context, *VideoPath) (*VideoPath, error)
	mustEmbedUnimplementedYolov5ParkingViolationServiceServer()
}

// UnimplementedYolov5ParkingViolationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedYolov5ParkingViolationServiceServer struct {
}

func (UnimplementedYolov5ParkingViolationServiceServer) Yolov5ParkingViolation(context.Context, *VideoPath) (*VideoPath, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Yolov5ParkingViolation not implemented")
}
func (UnimplementedYolov5ParkingViolationServiceServer) mustEmbedUnimplementedYolov5ParkingViolationServiceServer() {
}

// UnsafeYolov5ParkingViolationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Yolov5ParkingViolationServiceServer will
// result in compilation errors.
type UnsafeYolov5ParkingViolationServiceServer interface {
	mustEmbedUnimplementedYolov5ParkingViolationServiceServer()
}

func RegisterYolov5ParkingViolationServiceServer(s grpc.ServiceRegistrar, srv Yolov5ParkingViolationServiceServer) {
	s.RegisterService(&Yolov5ParkingViolationService_ServiceDesc, srv)
}

func _Yolov5ParkingViolationService_Yolov5ParkingViolation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoPath)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Yolov5ParkingViolationServiceServer).Yolov5ParkingViolation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yolov5_parking_violation.Yolov5ParkingViolationService/yolov5ParkingViolation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Yolov5ParkingViolationServiceServer).Yolov5ParkingViolation(ctx, req.(*VideoPath))
	}
	return interceptor(ctx, in, info, handler)
}

// Yolov5ParkingViolationService_ServiceDesc is the grpc.ServiceDesc for Yolov5ParkingViolationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Yolov5ParkingViolationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yolov5_parking_violation.Yolov5ParkingViolationService",
	HandlerType: (*Yolov5ParkingViolationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "yolov5ParkingViolation",
			Handler:    _Yolov5ParkingViolationService_Yolov5ParkingViolation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yolov5_parking_violation.proto",
}
