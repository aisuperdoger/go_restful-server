# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import proto_grpc.yolov5_leakage_pb2 as yolov5__leakage__pb2


class Yolov5LeakageServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.heatAreaDetection = channel.unary_unary(
                '/yolov5_leakage.Yolov5LeakageService/heatAreaDetection',
                request_serializer=yolov5__leakage__pb2.VideoPath.SerializeToString,
                response_deserializer=yolov5__leakage__pb2.VideoPath.FromString,
                )
        self.oilDetection = channel.unary_unary(
                '/yolov5_leakage.Yolov5LeakageService/oilDetection',
                request_serializer=yolov5__leakage__pb2.VideoPath.SerializeToString,
                response_deserializer=yolov5__leakage__pb2.VideoPath.FromString,
                )


class Yolov5LeakageServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def heatAreaDetection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def oilDetection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_Yolov5LeakageServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'heatAreaDetection': grpc.unary_unary_rpc_method_handler(
                    servicer.heatAreaDetection,
                    request_deserializer=yolov5__leakage__pb2.VideoPath.FromString,
                    response_serializer=yolov5__leakage__pb2.VideoPath.SerializeToString,
            ),
            'oilDetection': grpc.unary_unary_rpc_method_handler(
                    servicer.oilDetection,
                    request_deserializer=yolov5__leakage__pb2.VideoPath.FromString,
                    response_serializer=yolov5__leakage__pb2.VideoPath.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'yolov5_leakage.Yolov5LeakageService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Yolov5LeakageService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def heatAreaDetection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/yolov5_leakage.Yolov5LeakageService/heatAreaDetection',
            yolov5__leakage__pb2.VideoPath.SerializeToString,
            yolov5__leakage__pb2.VideoPath.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def oilDetection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/yolov5_leakage.Yolov5LeakageService/oilDetection',
            yolov5__leakage__pb2.VideoPath.SerializeToString,
            yolov5__leakage__pb2.VideoPath.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
